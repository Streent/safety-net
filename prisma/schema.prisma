// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String // Lembre-se de hashear as senhas!
  profile   String    // 'tecnico', 'cliente', 'admin'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reports   Report[]
  trainings TrainingSessionParticipant[]
  certificates Certificate[]
}

model Report {
  id                String    @id @default(cuid())
  title             String
  description       String
  type              String    // Ex: 'incidente', 'quase_acidente', 'observacao'
  status            String    // Ex: 'aberto', 'em_andamento', 'concluido'
  location          String?
  latitude          Float?
  longitude         Float?
  reportedById      String
  reportedBy        User      @relation(fields: [reportedById], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Campo para armazenar o caminho/identificador do arquivo no Nextcloud
  mediaNextcloudPaths String[] // Array de caminhos ou IDs
  // Outros campos específicos do relatório
}

model TrainingSession {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          String    // 'Treinamento', 'Consultoria'
  location      String?
  startTime     DateTime
  endTime       DateTime
  isRecurring   Boolean   @default(false)
  instructorId  String?   // Pode ser um User ID ou um campo de texto
  capacity      Int?
  participants  TrainingSessionParticipant[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  certificates  Certificate[] // Added missing relation for Certificate
}

model TrainingSessionParticipant {
  id                String   @id @default(cuid())
  sessionId         String
  session           TrainingSession @relation(fields: [sessionId], references: [id])
  participantId     String
  participant       User     @relation(fields: [participantId], references: [id])
  attended          Boolean  @default(false)
  checkInSelfiePath String?  // Caminho para a selfie no Nextcloud
  approved          Boolean  @default(false) // Se foi aprovado no treinamento
  createdAt         DateTime @default(now())

  @@unique([sessionId, participantId]) // Garante que um usuário não seja adicionado duas vezes na mesma sessão
}

model Certificate {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  trainingSessionId String?   // Opcional, se o certificado for de um treinamento específico
  trainingSession   TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingName      String    // Nome do treinamento ou qualificação
  templateId        String    // ID do template usado (pode ser um nome/caminho)
  issueDate         DateTime  @default(now())
  expiryDate        DateTime?
  certificatePdfPath String   // Caminho para o PDF do certificado no Nextcloud
  createdAt         DateTime  @default(now())
}

// Você também precisará de um modelo para templates de certificados
// model CertificateTemplate {
//   id        String @id @default(cuid())
//   name      String @unique
//   type      String // ex: 'docx', 'pptx'
//   nextcloudPath String // Caminho para o arquivo de template no Nextcloud
//   description String?
//   createdAt DateTime @default(now())
// }